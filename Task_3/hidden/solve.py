import struct

enc_flag = [
    0xDC, 0x86, 0x1A, 0x9A, 0xDD, 0x93, 0x9B, 0x35, 0xD3, 0x74, 
    0xDA, 0xEE, 0xE8, 0x5A, 0x3C, 0xC5, 0x1C, 0x64, 0x33, 0x47, 
    0xD2, 0x3B, 0x28, 0xF3, 0xCC, 0x5A, 0x48, 0x8B, 0x74, 0x0C, 
    0x4B, 0x87, 0x38, 0xD6, 0x80, 0x40, 0x51, 0xE6, 0x4A, 0x27, 
    0xA1, 0x73, 0x52, 0x0F, 0x93, 0x06, 0x54, 0x3D, 0x65, 0x13, 
    0xFB, 0xC8, 0x65, 0xAF, 0xD2, 0x67, 0xB3, 0x09, 0xEF, 0x7D, 
    0x23, 0xA6, 0x76, 0xE5, 0x13, 0x10, 0x13, 0xFF, 0x34, 0x8D, 
    0xAE, 0xD0, 0x9C, 0x2C, 0x4D, 0xF3, 0xA1, 0xBC, 0x46, 0x2F, 
    0x98, 0x87, 0xB6, 0x57, 0x1A, 0xA2, 0x17, 0xF1, 0xF0, 0xE5, 
    0xB0, 0xBA, 0x9B, 0x6D, 0xB5, 0xA7, 0xAC, 0x6A, 0x5E, 0xAC, 
    0xE8, 0xF6, 0x90, 0xD8, 0xB0, 0xA2, 0x99, 0x91
]
dword_enc_flag = [struct.unpack('<I', bytes(enc_flag[i:i+4]))[0] for i in range(0, len(enc_flag), 4)]
# print(len(dword_enc_flag))

key = b'AlpacaHackRound8'
dword_key = [struct.unpack('<I', key[i:i+4])[0] for i in range(0, len(key), 4)]
# print(dword_key)

def ror(val, n):
    return ((val >> n) | (val << (32 - n))) & 0xFFFFFFFF

def rol(val, n):
    return ((val << n) | (val >> (32 - n))) & 0xFFFFFFFF

def decrypt(var_4, dword_key):
    var_C = rol(dword_key[0], 5) + ror(dword_key[1], 3) & 0xFFFFFFFF
    var_8 = ror(dword_key[2], 3) - rol(dword_key[3], 5) & 0xFFFFFFFF
    dest = var_C ^ var_8 ^ var_4

    if var_4 & 1 == 0:
        dword_key[0] ^= ror(var_8, 0xD)
        dword_key[1] ^= ror(var_8, 0xF)
        dword_key[2] ^= rol(var_C, 0xD)
        dword_key[3] ^= rol(var_C, 0xB)
    else:
        dword_key[0] ^= rol(var_8, 0xB)
        dword_key[1] ^= rol(var_8, 0xD)
        dword_key[2] ^= ror(var_C, 0xF)
        dword_key[3] ^= ror(var_C, 0xD)
    return dest

def main():
    
    flag = []
    for i in range(len(dword_enc_flag)):
        flag.append(decrypt(dword_enc_flag[i], dword_key))
    flag = b''.join([struct.pack('<I', i) for i in flag])
    print(flag)


main()